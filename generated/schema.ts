// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ClaimToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dayId", Value.fromString(""));
    this.set("monthId", Value.fromString(""));
    this.set("yearId", Value.fromString(""));
    this.set("amountToBeTransfer", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClaimToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ClaimToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ClaimToken", id.toString(), this);
    }
  }

  static load(id: string): ClaimToken | null {
    return changetype<ClaimToken | null>(store.get("ClaimToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dayId(): string {
    let value = this.get("dayId");
    return value!.toString();
  }

  set dayId(value: string) {
    this.set("dayId", Value.fromString(value));
  }

  get monthId(): string {
    let value = this.get("monthId");
    return value!.toString();
  }

  set monthId(value: string) {
    this.set("monthId", Value.fromString(value));
  }

  get yearId(): string {
    let value = this.get("yearId");
    return value!.toString();
  }

  set yearId(value: string) {
    this.set("yearId", Value.fromString(value));
  }

  get amountToBeTransfer(): BigInt {
    let value = this.get("amountToBeTransfer");
    return value!.toBigInt();
  }

  set amountToBeTransfer(value: BigInt) {
    this.set("amountToBeTransfer", Value.fromBigInt(value));
  }

  get user(): Bytes | null {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes | null) {
    if (!value) {
      this.unset("user");
    } else {
      this.set("user", Value.fromBytes(<Bytes>value));
    }
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get payment(): string | null {
    let value = this.get("payment");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set payment(value: string | null) {
    if (!value) {
      this.unset("payment");
    } else {
      this.set("payment", Value.fromString(<string>value));
    }
  }
}

export class PaymentSubmited extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("REQUEST_REFUND", Value.fromString(""));
    this.set("dayId", Value.fromString(""));
    this.set("monthId", Value.fromString(""));
    this.set("yearId", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("employeeId", Value.fromString(""));
    this.set("invoiceLink", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PaymentSubmited entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PaymentSubmited entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PaymentSubmited", id.toString(), this);
    }
  }

  static load(id: string): PaymentSubmited | null {
    return changetype<PaymentSubmited | null>(store.get("PaymentSubmited", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get REQUEST_REFUND(): string {
    let value = this.get("REQUEST_REFUND");
    return value!.toString();
  }

  set REQUEST_REFUND(value: string) {
    this.set("REQUEST_REFUND", Value.fromString(value));
  }

  get dayId(): string {
    let value = this.get("dayId");
    return value!.toString();
  }

  set dayId(value: string) {
    this.set("dayId", Value.fromString(value));
  }

  get monthId(): string {
    let value = this.get("monthId");
    return value!.toString();
  }

  set monthId(value: string) {
    this.set("monthId", Value.fromString(value));
  }

  get yearId(): string {
    let value = this.get("yearId");
    return value!.toString();
  }

  set yearId(value: string) {
    this.set("yearId", Value.fromString(value));
  }

  get from(): Bytes | null {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes | null) {
    if (!value) {
      this.unset("from");
    } else {
      this.set("from", Value.fromBytes(<Bytes>value));
    }
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get employeeId(): string {
    let value = this.get("employeeId");
    return value!.toString();
  }

  set employeeId(value: string) {
    this.set("employeeId", Value.fromString(value));
  }

  get invoiceLink(): string {
    let value = this.get("invoiceLink");
    return value!.toString();
  }

  set invoiceLink(value: string) {
    this.set("invoiceLink", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get claims(): string | null {
    let value = this.get("claims");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set claims(value: string | null) {
    if (!value) {
      this.unset("claims");
    } else {
      this.set("claims", Value.fromString(<string>value));
    }
  }
}
